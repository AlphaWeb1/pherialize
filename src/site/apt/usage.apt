Usage

* How to serialize data

  For serializing a Java object into a PHP serialization format string you
  just use the static method Pherialize.serialize(). Just pass the object you
  want to serialize to this method and you get a string in return which you
  can then unserialize in PHP.
  
  Example:
  
---
List list;

list = new ArrayList();
list.add("A string");
list.add(Integer.valueOf(12345));
list.add(Boolean.TRUE);
System.out.println(Pherialize.serialize(list));
---

  The result is printed to stdout and looks like this:
  
---
a:3:{i:0;s:8:"A string";i:1;i:12345;i:2;b:1;}
---

  Now you can use this string in PHP to unserialize it back into a PHP array:
  
---
$data = unserialize('a:3:{i:0;s:8:"A string";i:1;i:12345;i:2;b:1;}');
var_dump($data);
---

  Result is a PHP array with exactly the data and types you have added to the
  array with Java:
  
---
array(3) {
  [0]=>
  string(8) "A string"
  [1]=>
  int(12345)
  [2]=>
  bool(true)
}
---

* How to unserialize data

  Let's assume you have serialized the PHP array from the previous example and
  you have stored this serialized string in the variable <data>. For unserializing and
  printing the value you just have to use the Pherialize.unserialize() method.
  Example:
  
---
MixedArray list;

list = Pherialize.unserialize(data).toArray();
System.out.println("Item 1: " + list.getString(0));
System.out.println("Item 2: " + list.getInteger(1));
System.out.println("Item 3: " + list.getBoolean(2));
---

  The correct result printed to stdout is this:
  
---
Item 1: A string
Item 2: 12345
Item 3: true
---
  